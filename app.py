# Add these imports at the top with the existing ones
from email.mime.text import MIMEText
import smtplib

# Add these environment variables after the existing ones
EMAIL_ADDRESS = os.getenv('EMAIL_ADDRESS')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')

# Add this new function after your existing functions
def send_email(subject, body):
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = EMAIL_ADDRESS
        
        # Connect to Outlook SMTP server
        server = smtplib.SMTP('smtp.office365.com', 587)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        logger.debug("Email sent successfully")
        return True
    except Exception as e:
        logger.error(f"Error sending email: {e}")
        return False

# Modify your webhook route to include email notifications
@app.route('/webhook', methods=['POST'])
def webhook():
    """Handle incoming messages"""
    data = request.get_json()
    logger.debug(f"Received webhook data: {data}")
    
    if data["object"] == "page":
        for entry in data["entry"]:
            for messaging_event in entry["messaging"]:
                if messaging_event.get("message"):
                    sender_id = messaging_event["sender"]["id"]
                    logger.debug(f"Sender ID: {sender_id}")
                    
                    if "text" in messaging_event["message"]:
                        message_text = messaging_event["message"]["text"].lower()
                        logger.debug(f"Received message: {message_text}")
                        
                        # Define price-related keywords
                        price_keywords = {'—Ü—ñ–Ω–∞', '–ø—Ä–∞–π—Å', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–ø–æ—á–µ–º', '–ø—Ä–∞–π—Å-–ª–∏—Å—Ç', 'price', 
                                       '—Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î', '–ø–æ—á–æ–º—É', '–ø–æ —á–æ–º—É', '–∫–æ—à—Ç—É—î'}
                        
                        # Check if message contains order-related keywords
                        order_keywords = {'–∑–∞–º–æ–≤–∏—Ç–∏', '–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '–∫—É–ø–∏—Ç–∏', 'order', 'buy'}
                        
                        if any(keyword in message_text for keyword in order_keywords):
                            # Send email notification for orders
                            email_subject = "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                            email_body = f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Facebook Messenger.\nID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {sender_id}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}"
                            send_email(email_subject, email_body)
                        
                        # Check if any price keyword is in the message
                        if any(keyword in message_text for keyword in price_keywords):
                            response = get_latest_price_list()
                            if not response or "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏" in response:
                                response = ("üè∑Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å:\n\n"
                                          "ü•ö –Ø–π—Ü—è - 50-55 –≥—Ä–Ω/–ª–æ—Ç–æ–∫ (20 —à—Ç)\n\n"
                                          "üìû –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                                          "–¢–µ–ª–µ—Ñ–æ–Ω/Viber: 0953314400")
                        else:
                            response = get_perplexity_response(message_text)
                        
                        logger.debug(f"Response to send: {response}")
                        
                        if send_message(sender_id, response):
                            logger.debug("Message sent successfully")
                        else:
                            logger.error("Failed to send message")
    
    return "ok", 200
