import os
import requests
import re
from flask import Flask, request, jsonify
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib
from datetime import datetime
import logging

app = Flask(__name__)

# Configure logging
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# Environment variables for SMTP configuration
SMTP_SERVER = "smtp-mail.outlook.com"
SMTP_PORT = 587
SMTP_USERNAME = os.environ.get('SMTP_USERNAME')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD')
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL')

# Environment variables for application configuration
# SECRET KEY should be environment variables in production
try:
    app.secret_key = os.environ['SECRET_KEY']
except KeyError:
    # Use a default secret key for development purposes only
    app.secret_key = 'development-secret-key-not-for-production-use'

# Class to manage user state
class OrderState:
    def __init__(self):
        self.step = 'start'
        self.quantity = None
        self.phone = None
        self.delivery_type = None
        self.post_office = None

# A dictionary to keep track of user states
user_states = {}

def send_text(sender_id, message):
    """Sends text message back to the user via the Messenger platform."""
    params = {
        "access_token": os.environ['PAGE_ACCESS_TOKEN']
    }
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "recipient": {
            "id": sender_id
        },
        "message": {
            "text": message
        }
    }
    response = requests.post(
        "https://graph.facebook.com/v13.0/me/messages",
        params=params,
        headers=headers,
        data=json.dumps(data)
    )
    if response.status_code != 200:
        logging.error(f"Failed to send response to {sender_id}. Error: {response.text}")

def send_admin_notification(order_details):
    """Send order notification to admin via email."""
    try:
        msg = MIMEMultipart()
        msg['From'] = SMTP_USERNAME
        msg['To'] = ADMIN_EMAIL
        msg['Subject'] = "ü•ö –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è—î—Ü—å"
        
        msg.attach(MIMEText(order_details, 'plain', 'utf-8'))
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
        logging.info("Admin notification sent successfully")
        return True
    except Exception as e:
        logging.error(f"Failed to send admin notification: {e}")
        return False

def handle_order_flow(sender_id, message_text):
    if sender_id not in user_states:
        user_states[sender_id] = OrderState()
    
    state = user_states[sender_id]
    
    if state.step == 'start':
        state.step = 'quantity'
        return "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ü•ö\n\n–°–∫—ñ–ª—å–∫–∏ –ª–æ—Ç–∫—ñ–≤ —è—î—Ü—å –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?\n(1 –ª–æ—Ç–æ–∫ = 20 —à—Ç)"
    
    elif state.step == 'quantity':
        try:
            quantity = int(message_text)
            if quantity <= 0:
                return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤ (–±—ñ–ª—å—à–µ 0)"
            state.quantity = quantity
            state.step = 'phone'
            return "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n0971234567"

        except ValueError:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤)"
    
    elif state.step == 'phone':
        if re.match(r'^(?:\+?38)?0\d{9}$', message_text.replace(' ', '')):
            state.phone = message_text
            state.step = 'delivery'
            return "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n1 - –ù–æ–≤–∞ –ü–æ—à—Ç–∞\n2 - –£–∫—Ä–ø–æ—à—Ç–∞"
        else:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0971234567)"

    elif state.step == 'delivery':
        if message_text in ['1', '2']:
            state.delivery_type = '–ù–æ–≤–∞ –ü–æ—à—Ç–∞' if message_text == '1' else '–£–∫—Ä–ø–æ—à—Ç–∞'
            state.step = 'post_office'
            return f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {state.delivery_type}:"
        else:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å 1 (–ù–æ–≤–∞ –ü–æ—à—Ç–∞) –∞–±–æ 2 (–£–∫—Ä–ø–æ—à—Ç–∞)"
    
    elif state.step == 'post_office':
        state.post_office = message_text

        order_details = (
            f"ü•ö –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤: {state.quantity} (–ø–æ 20 —à—Ç)\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.phone}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {state.delivery_type}\n"
            f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {state.post_office}\n"
            f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {sender_id}\n"
            f"–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        send_admin_notification(order_details)

        customer_response = (
            "ü•ö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤: {state.quantity} (–ø–æ 20 —à—Ç)\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.phone}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {state.delivery_type}\n"
            f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {state.post_office}\n\n"
            "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
            "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üôè"
        )
        
        del user_states[sender_id]
        return customer_response

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == 'GET':
        if request.args.get("hub.verify_token") == os.environ.get("VERIFY_TOKEN"):
            return request.args.get("hub.challenge")
        return "Invalid token", 403
    
    if request.method == 'POST':
        data = request.get_json()
        if data["object"] == "page":
            for entry in data["entry"]:
                for messaging_event in entry["messaging"]:
                    if messaging_event.get("message"):
                        sender_id = messaging_event["sender"]["id"]
                        if "text" in messaging_event["message"]:
                            message_text = messaging_event["message"]["text"].lower()
                            
                            if any(keyword in message_text for keyword in ['—Ü—ñ–Ω–∞', '–ø—Ä–∞–π—Å', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–∑–∞–º–æ–≤–∏—Ç–∏']):
                                response = "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ–∫–∏ —â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ü–∏–º."
                            else:
                                response = handle_order_flow(sender_id, message_text)

                            send_text(sender_id, response)

        return "ok", 200

@app.route('/')
def hello_world():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
