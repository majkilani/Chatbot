import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Dict

# Email configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "your-email@gmail.com"  # You need to provide your Gmail
SMTP_PASSWORD = "your-app-password"  # You need to generate an App Password
ADMIN_EMAIL = "majid.alkilani@gmail.com"

class OrderState:
    def __init__(self):
        self.step = 'start'
        self.quantity = None
        self.phone = None
        self.delivery_type = None
        self.post_office = None

user_states: Dict[str, OrderState] = {}

def send_admin_notification(order_details: str):
    """Send order notification to admin via email"""
    try:
        msg = MIMEMultipart()
        msg['From'] = SMTP_USERNAME
        msg['To'] = ADMIN_EMAIL
        msg['Subject'] = "ü•ö –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è—î—Ü—å"
        
        msg.attach(MIMEText(order_details, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")
        return False

def handle_order_flow(sender_id: str, message_text: str) -> str:
    """Handle the ordering process flow"""
    if sender_id not in user_states:
        user_states[sender_id] = OrderState()
    
    state = user_states[sender_id]
    message_text = message_text.strip().lower()

    if state.step == 'start':
        state.step = 'quantity'
        return ("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ü•ö\n\n"
                "–°–∫—ñ–ª—å–∫–∏ –ª–æ—Ç–∫—ñ–≤ —è—î—Ü—å –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?\n"
                "(1 –ª–æ—Ç–æ–∫ = 20 —à—Ç)")

    elif state.step == 'quantity':
        try:
            quantity = int(message_text)
            if quantity <= 0:
                return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤ (–±—ñ–ª—å—à–µ 0)"
            state.quantity = quantity
            state.step = 'phone'
            return ("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                   "0971234567")

        except ValueError:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤)"

    elif state.step == 'phone':
        if re.match(r'^(?:\+?38)?0\d{9}$', message_text.replace(' ', '')):
            state.phone = message_text
            state.step = 'delivery'
            return ("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
                   "1 - –ù–æ–≤–∞ –ü–æ—à—Ç–∞\n"
                   "2 - –£–∫—Ä–ø–æ—à—Ç–∞")
        else:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0971234567)"

    elif state.step == 'delivery':
        if message_text == '1':
            state.delivery_type = '–ù–æ–≤–∞ –ü–æ—à—Ç–∞'
        elif message_text == '2':
            state.delivery_type = '–£–∫—Ä–ø–æ—à—Ç–∞'
        else:
            return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å 1 (–ù–æ–≤–∞ –ü–æ—à—Ç–∞) –∞–±–æ 2 (–£–∫—Ä–ø–æ—à—Ç–∞)"
        
        state.step = 'post_office'
        return f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {state.delivery_type}:"

    elif state.step == 'post_office':
        state.post_office = message_text
        
        # Create order details for admin
        order_details = (
            "ü•ö –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤: {state.quantity} (–ø–æ 20 —à—Ç)\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.phone}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {state.delivery_type}\n"
            f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {state.post_office}\n"
            f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {sender_id}\n"
            f"–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        # Send notification to admin
        if send_admin_notification(order_details):
            logger.info("Admin notification sent successfully")
        else:
            logger.error("Failed to send admin notification")

        # Response to customer
        customer_response = (
            "ü•ö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ—Ç–∫—ñ–≤: {state.quantity} (–ø–æ 20 —à—Ç)\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.phone}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {state.delivery_type}\n"
            f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {state.post_office}\n\n"
            "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
            "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üôè"
        )
        
        # Reset the state
        del user_states[sender_id]
        return customer_response

    return "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É."

# Update your webhook function to include order handling
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    
    if data["object"] == "page":
        for entry in data["entry"]:
            for messaging_event in entry["messaging"]:
                if messaging_event.get("message"):
                    sender_id = messaging_event["sender"]["id"]
                    
                    if "text" in messaging_event["message"]:
                        message_text = messaging_event["message"]["text"].lower()
                        
                        # Handle price request
                        if any(keyword in message_text for keyword in ['—Ü—ñ–Ω–∞', '–ø—Ä–∞–π—Å', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–∑–∞–º–æ–≤–∏—Ç–∏']):
                            response = get_latest_price_list()
                        else:
                            # Handle order flow
                            response = handle_order_flow(sender_id, message_text)
                        
                        send_message(sender_id, response)
                        
    return "ok", 200
