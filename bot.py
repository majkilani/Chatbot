from flask import Flask, request
import requests
import os
import json
from datetime import datetime

app = Flask(__name__)

# Temporary order storage (replace with database in production)
user_sessions = {}

ORDER_STATES = {
    'QUANTITY': 'quantity',
    'PHONE': 'phone',
    'LOCATION': 'location',
    'ADDRESS': 'address',
    'CONFIRM': 'confirm'
}

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if data["object"] == "page":
        for entry in data["entry"]:
            for messaging_event in entry["messaging"]:
                sender_id = messaging_event["sender"]["id"]
                
                if messaging_event.get("message"):
                    handle_message(sender_id, messaging_event["message"])
                elif messaging_event.get("postback"):
                    handle_postback(sender_id, messaging_event["postback"])
    return "ok", 200

def handle_message(sender_id, message):
    if "text" in message:
        text = message["text"].lower()
        
        if text == "–∑–∞–º–æ–≤–∏—Ç–∏":
            start_order(sender_id)
        elif sender_id in user_sessions:
            process_order_step(sender_id, text)
        else:
            send_welcome_message(sender_id)

def start_order(sender_id):
    user_sessions[sender_id] = {
        'state': ORDER_STATES['QUANTITY'],
        'order_data': {}
    }
    send_message(sender_id, "ü•ö –°–∫—ñ–ª—å–∫–∏ –¥–µ—Å—è—Ç–∫—ñ–≤ —è—î—Ü—å –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")

def process_order_step(sender_id, text):
    current_state = user_sessions[sender_id]['state']
    
    if current_state == ORDER_STATES['QUANTITY']:
        if text.isdigit() and int(text) > 0:
            user_sessions[sender_id]['order_data']['quantity'] = int(text)
            user_sessions[sender_id]['state'] = ORDER_STATES['PHONE']
            send_message(sender_id, "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n+380XXXXXXXXX")
        else:
            send_message(sender_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–±—ñ–ª—å—à–µ 0)")

    elif current_state == ORDER_STATES['PHONE']:
        if validate_phone(text):
            user_sessions[sender_id]['order_data']['phone'] = text
            user_sessions[sender_id]['state'] = ORDER_STATES['ADDRESS']
            send_message(sender_id, "üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
        else:
            send_message(sender_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380991234567)")

    elif current_state == ORDER_STATES['ADDRESS']:
        user_sessions[sender_id]['order_data']['address'] = text
        show_order_confirmation(sender_id)
        user_sessions[sender_id]['state'] = ORDER_STATES['CONFIRM']

def validate_phone(phone):
    # Basic phone validation
    return phone.startswith('+380') and len(phone) == 13 and phone[1:].isdigit()

def show_order_confirmation(sender_id):
    order_data = user_sessions[sender_id]['order_data']
    confirmation_message = f"""
üßæ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:

üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order_data['quantity']} –¥–µ—Å—è—Ç–∫—ñ–≤
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}
üìç –ê–¥—Ä–µ—Å–∞: {order_data['address']}

üí∞ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {order_data['quantity'] * 100} –≥—Ä–Ω

–í—Å–µ –≤—ñ—Ä–Ω–æ?"""
    
    data = {
        "recipient": {"id": sender_id},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": confirmation_message,
                    "buttons": [
                        {
                            "type": "postback",
                            "title": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                            "payload": "CONFIRM_ORDER"
                        },
                        {
                            "type": "postback",
                            "title": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                            "payload": "CANCEL_ORDER"
                        }
                    ]
                }
            }
        }
    }
    send_api_request(data)

def handle_postback(sender_id, postback):
    payload = postback["payload"]
    
    if payload == "CONFIRM_ORDER":
        if sender_id in user_sessions:
            # Here you would save the order to your database
            order_data = user_sessions[sender_id]['order_data']
            send_message(sender_id, f"""
‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!

üöö –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.

–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üôè
""")
            # Clear the session
            del user_sessions[sender_id]
        
    elif payload == "CANCEL_ORDER":
        if sender_id in user_sessions:
            del user_sessions[sender_id]
        send_message(sender_id, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–ø–∏—à—ñ—Ç—å '–ó–∞–º–æ–≤–∏—Ç–∏'")

def send_welcome_message(sender_id):
    send_message(sender_id, """
–í—ñ—Ç–∞—î–º–æ! üëã

ü•ö –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è—î—Ü—å –Ω–∞–ø–∏—à—ñ—Ç—å "–ó–∞–º–æ–≤–∏—Ç–∏"

–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:
‚úÖ –°–≤—ñ–∂—ñ –¥–æ–º–∞—à–Ω—ñ —è–π—Ü—è
‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –º—ñ—Å—Ç—É
‚úÖ –ì–Ω—É—á–∫—ñ —Ü—ñ–Ω–∏
""")

def send_message(recipient_id, message_text):
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }
    send_api_request(data)

def send_api_request(data):
    params = {"access_token": os.environ["PAGE_ACCESS_TOKEN"]}
    headers = {"Content-Type": "application/json"}
    r = requests.post("https://graph.facebook.com/v2.6/me/messages", 
                     params=params, headers=headers, json=data)
    if r.status_code != 200:
        print(r.status_code)
        print(r.text)

@app.route('/setup', methods=['GET'])
def setup_bot():
    data = {
        "get_started": {"payload": "GET_STARTED"},
        "greeting": [
            {
                "locale": "default",
                "text": "–í—ñ—Ç–∞—î–º–æ! –ó–∞–º–æ–≤–ª—è–π—Ç–µ —Å–≤—ñ–∂—ñ —è–π—Ü—è –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é! ü•ö"
            }
        ]
    }
    params = {"access_token": os.environ["PAGE_ACCESS_TOKEN"]}
    headers = {"Content-Type": "application/json"}
    r = requests.post("https://graph.facebook.com/v2.6/me/messenger_profile", 
                     params=params, headers=headers, json=data)
    return "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", 200

if __name__ == "__main__":
    app.run(debug=True)
